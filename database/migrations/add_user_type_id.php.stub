<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddUserTypeId extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        $tableNames = config('permission.table_names');

        if (empty($tableNames)) {
            throw new \Exception('Error: config/permission.php not loaded. Run [php artisan config:clear] and try again.');
        }

        Schema::table($tableNames['roles'], function (Blueprint $table) {
                 $table->foreignId('user_type_id')->after('id')->nullable()->default(1)->constrained('user_types');
        });

          Schema::table($tableNames['permissions'], function (Blueprint $table) {
                 $table->foreignId('user_type_id')->after('id')->nullable()->constrained('user_types');
          });


          Schema::table($tableNames['role_has_permissions'], function (Blueprint $table) {
                 $table->foreignId('user_type_id')->nullable()->constrained('user_types');
        });
          Schema::table($tableNames['model_has_permissions'], function (Blueprint $table) {
                 $table->foreignId('user_type_id')->nullable()->nullable()->constrained('user_types');
        });

           Schema::table($tableNames['model_has_roles'], function (Blueprint $table) {
                 $table->foreignId('user_type_id')->nullable()->constrained('user_types');
        });


    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        $tableNames = config('permission.table_names');

        if (empty($tableNames)) {
            throw new \Exception('Error: config/permission.php not found and defaults could not be merged. Please publish the package configuration before proceeding, or drop the tables manually.');
        }

         Schema::table($tableNames['roles'], function (Blueprint $table) {
                $table->dropConstrainedForeignId('user_type_id');
        });

          Schema::table($tableNames['permissions'], function (Blueprint $table) {
                $table->dropConstrainedForeignId('user_type_id');
        });
          Schema::table($tableNames['role_has_permissions'], function (Blueprint $table) {
                $table->dropConstrainedForeignId('user_type_id');
        });

         Schema::table($tableNames['model_has_roles'], function (Blueprint $table) {
                $table->dropConstrainedForeignId('user_type_id');
        });

         Schema::table($tableNames['model_has_permissions'], function (Blueprint $table) {
                $table->dropConstrainedForeignId('user_type_id');
        });


    }
}
